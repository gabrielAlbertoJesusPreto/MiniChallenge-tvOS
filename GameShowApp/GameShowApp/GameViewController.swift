//
//  GameViewController.swift
//  GameShowApp
//
//  Created by Liliane Bezerra Lima on 23/05/16.
//  Copyright (c) 2016 Gabriel Alberto. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

extension UIColor {
    convenience init(netHex:Int, alpha: CGFloat) {
        self.init(red:CGFloat((netHex >> 16) & 0xff)/255.0, green:CGFloat((netHex >> 8) & 0xff)/255.0, blue:CGFloat(netHex & 0xff) / 255.0, alpha: alpha)
    }
}

protocol GameViewControllerInput {
    func displaySomething(viewModel: GameViewModel)
    func displayAlertScore(viewModel: GameScoreViewModel)
    func displayNewTrophies(viewModel: GameViewModel.NewTrophy)
    func displayNoNewTrophy(viewModel: GameViewModel.NoNewTrophy)
}

protocol GameViewControllerOutput {
    func doSomething()
    func selectAnswer(request: GameScoreRequest)
    func nextQuestion()
    
}

class GameViewController: UIViewController, GameViewControllerInput {
    @IBOutlet weak var phraseQuestionLabel: UILabel!
    @IBOutlet weak var answer0Button: CustomButton!
    @IBOutlet weak var answer1Button: CustomButton!
    @IBOutlet weak var answer2Button: CustomButton!
    @IBOutlet weak var answer3Button: CustomButton!
    @IBOutlet weak var labelScore: UILabel!
    @IBOutlet weak var activiryIndicator: UIActivityIndicatorView!
    @IBOutlet weak var life3Image: UIImageView!
    @IBOutlet weak var life2Image: UIImageView!
    @IBOutlet weak var life1Image: UIImageView!
    
    var output: GameViewControllerOutput!
    var router: GameRouter!
    var correctPosition = 0
    var level = 0
    var isCorrect = false
    var currentScoreSinglePlayer = 0
    var players: [(String, Int)]?
    var life = 3
    let color = UIColor(netHex: 0x46C6B7, alpha: 1)
    var selectButton = UIButton()

  
  // MARK: Object lifecycle
  
  override func awakeFromNib() {
    super.awakeFromNib()
    GameConfigurator.sharedInstance.configure(self)
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    doSomethingOnLoad()
    
    activiryIndicator.startAnimating()
  }
    
    override var preferredFocusedView: UIView? {
        return answer0Button
    }
    
    @IBAction func selectAnswer(sender: AnyObject) {
        let button = sender as? UIButton
        selectButton = button!
        self.verifyCorrectAnswer(sender.tag, button: button!)
    }
    
    func verifyCorrectAnswer(tag:Int,button:UIButton) {
        if tag == correctPosition {
            button.backgroundColor = UIColor.greenColor()
            isCorrect = true
            currentScoreSinglePlayer = currentScoreSinglePlayer + (100*level)
            
        } else {
            button.backgroundColor = UIColor.redColor()
            isCorrect = false
            life -= 1
            
            if life == 2 {
                life3Image.hidden = true
            }
            if life == 1 {
                life2Image.hidden = true
            }
            if life == 0 {
                life1Image.hidden = true
            }
        }
        if life == 0 {
            var viewModel = GameScoreViewModel()
            viewModel.title = "Fim de Jogo"
            viewModel.title = "Você marcou \(currentScoreSinglePlayer) pontos"
            self.displayAlertScore(viewModel)
        } else {
            self.output.nextQuestion()
        }
    }
    
    // MARK: Protocol
    func doSomethingOnLoad() {
        // NOTE: Ask the Interactor to do some work
        output.doSomething()
    }
    
    func selectAnswer() {
        var request = GameScoreRequest()
        request.level = level
        request.isCorrect = isCorrect
        output.selectAnswer(request)
    }
    
    func hiddenLife() {
        if life == 3 {
            self.life1Image.hidden = false
            self.life2Image.hidden = false
            self.life3Image.hidden = false
        } else if life == 2 {
            self.life1Image.hidden = false
            self.life2Image.hidden = false
            self.life3Image.hidden = true
        } else if life == 1 {
            self.life1Image.hidden = false
            self.life2Image.hidden = true
            self.life3Image.hidden = true
        } else {
            self.life1Image.hidden = true
            self.life2Image.hidden = true
            self.life3Image.hidden = true
        }
        
        
    }
    
    // MARK: Display logic
    func displaySomething(viewModel: GameViewModel) {
        dispatch_async(dispatch_get_main_queue()) {
            self.answer0Button.setNeedsFocusUpdate()
            self.activiryIndicator.stopAnimating()
            self.activiryIndicator.hidden = true
            self.phraseQuestionLabel.hidden = false
            self.answer0Button.hidden = false
            self.answer1Button.hidden = false
            self.answer2Button.hidden = false
            self.answer3Button.hidden = false
            self.labelScore.hidden = false
            self.hiddenLife()
            self.selectButton.backgroundColor = self.color
            
            self.labelScore.text = String(self.currentScoreSinglePlayer)
            self.phraseQuestionLabel.text = viewModel.phraseQuestion
            self.level = viewModel.level!
            self.correctPosition = viewModel.correctPosition!
            
            self.answer0Button.setTitle(viewModel.answers![0], forState: UIControlState.Normal)
            self.answer1Button.setTitle(viewModel.answers![1], forState: UIControlState.Normal)
            self.answer2Button.setTitle(viewModel.answers![2], forState: UIControlState.Normal)
            self.answer3Button.setTitle(viewModel.answers![3], forState: UIControlState.Normal)
            
        }
    }
    
    func displayAlertScore(viewModel: GameScoreViewModel) {
        let alert = UIAlertController(title: viewModel.title, message: viewModel.textAlert, preferredStyle: UIAlertControllerStyle.Alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.Default, handler: { (alert) in
            self.navigationController?.popToRootViewControllerAnimated(true)           
        }))
        
        self.presentViewController(alert, animated: true, completion: nil)
    }
    
    func displayNoNewTrophy(viewModel: GameViewModel.NoNewTrophy) {
        print("Pronto!!!! - Nenhum Troféu")
    }
        
        func displayNewTrophies(viewModel: GameViewModel.NewTrophy) {
            
            
            print("Pronto!!!! - Novo Troféu")
            
            let alertController = UIAlertController(title: "Parabéns", message: viewModel.message, preferredStyle: .Alert)
            let action = UIAlertAction(title: "OK, Entendi", style: .Default, handler: nil)
            alertController.addAction(action)
            self.presentViewController(alertController, animated: true
                , completion: nil)
            
        }
}



