//
//  GamePresenter.swift
//  GameShowApp
//
//  Created by Liliane Bezerra Lima on 23/05/16.
//  Copyright (c) 2016 Gabriel Alberto. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol GamePresenterInput {
    func presentSomething(response: GameResponse)
    func presentScore(response: GameScoreResponse)
}

protocol GamePresenterOutput: class {
  func displaySomething(viewModel: GameViewModel)
    func displayAlertScore(viewModel: GameScoreViewModel)
}

extension CollectionType {
    /// Return a copy of `self` with its elements shuffled
    func shuffle() -> [Generator.Element] {
        var list = Array(self)
        list.shuffleInPlace()
        return list
    }
}

extension MutableCollectionType where Index == Int {
    /// Shuffle the elements of `self` in-place.
    mutating func shuffleInPlace() {
        // empty and single-element collections don't shuffle
        if count < 2 { return }
        
        for i in 0..<count - 1 {
            let j = Int(arc4random_uniform(UInt32(count - i))) + i
            guard i != j else { continue }
            swap(&self[i], &self[j])
        }
    }
}

class GamePresenter: GamePresenterInput {
  weak var output: GamePresenterOutput!
  
  // MARK: Presentation logic
  
  func presentSomething(response: GameResponse) {
    var viewModel = GameViewModel()
    
    if response.sucess == true {
        var i = 0
        viewModel.phraseQuestion = response.question!.phrase
        viewModel.level = response.question?.level
        var answers = [String]()
        for item in (response.question?.answers?.shuffle())! {
            answers.append(item.phrase!)
            if item.isCorrect == 1 {
                viewModel.correctPosition = i
            }
            i += 1
        }
        viewModel.answers = answers
        output.displaySomething(viewModel)
    } else {
        var viewModel = GameScoreViewModel()
        let textAlert = "Parabéns você terminou o jogo"
        let title = "Fim de jogo"
        
        viewModel.textAlert = textAlert
        viewModel.title = title
        output.displayAlertScore(viewModel)
    }
    
   
    
  }
    
    func presentScore(response: GameScoreResponse) {
        var textAlert:String?
        var title:String?
        
        if response.isCorrect == true {
            textAlert = "Parabéns você acertou e ganhou \(response.score!) pontos"
            title = "Você acertou"
        } else {
            textAlert = "Você não marcou pontos"
            title = "Você errou"
        }
        var viewModel = GameScoreViewModel()
        viewModel.textAlert = textAlert
        viewModel.title = title
        output.displayAlertScore(viewModel)
    }
}
